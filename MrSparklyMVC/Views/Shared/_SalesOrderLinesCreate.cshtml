@model MrSparklyMVC.Models.SalesOrderLine

@{
}

<script src="~/Scripts/jquery-1.8.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script>
    var $product = $('#productDDL');
    var $quantity = $('#quantity');
    var $price = $('#price');

    //updates the price textbox with the retail price of the selected product.
    var updatePrice = function () {
        $url = '../../Product/GetProductPrice/' + $product.val();
        $.getJSON($url,
                   function (price) {
                       //
                       $('#price').val(price);
                   })
        .fail(function () {
            alert("fail");
        });

        //if a qty has been set, update the subtotal also
        var qtyVal = ($quantity.val())
        //the function call is delayed to ensure the price txtbox has been updated with the new price.
        if (qtyVal != "") {  window.setTimeout(updateSubtotal, 50); }
    }

    //updates the line subtotal
    var updateSubtotal = function () {
            var price = parseFloat($('#price').val());
            var qty = parseInt($('#quantity').val());
            $('#subTotal').val((price * qty).toString());
    }

    //update the price when page loads.
    updatePrice();

    $product.on('change', updatePrice);
    $quantity.on('change', updateSubtotal);
</script>

<h3>New Item</h3>

@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>SalesOrderLine</legend>

        <!--<div class="editor-label">
            @Html.LabelFor(model => model.salesOrderLinesID)
        </div>-->
        <div class="editor-field">
            @Html.EditorFor(model => model.salesOrderLinesID, new { @readonly = "readonly", disabled= "disabled" })
            @Html.ValidationMessageFor(model => model.salesOrderLinesID)
        </div>

        <!--<div class="editor-label">
            @Html.LabelFor(model => model.salesOrderID)
        </div>-->
        <div class="editor-field">
            @Html.EditorFor(model => model.salesOrderID)
            @Html.ValidationMessageFor(model => model.salesOrderID)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.productID, "Product")
        </div>
        <div class="editor-field">
            @Html.DropDownList("ProductID", ViewBag.productID as SelectList, new { @id = "productDDL" })
            @Html.ValidationMessageFor(model => model.productID)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.salesOrderItemQty)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.salesOrderItemQty, new { @id = "quantity" })
            @Html.ValidationMessageFor(model => model.salesOrderItemQty)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.salesOrderItemPrice)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.salesOrderItemPrice, new { @id = "price" })
            @Html.ValidationMessageFor(model => model.salesOrderItemPrice)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.salesOrderLinesSubtotal)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.salesOrderLinesSubtotal, new { @id = "subTotal" })
            @Html.ValidationMessageFor(model => model.salesOrderLinesSubtotal)
        </div>

        <p>
            <input type="submit" value="Create" />
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to Order Details", "Details", "SalesOrders", new { id = Model.salesOrderID }, null)
</div>
